using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace BibliotecaApp
{
    public class Livro
    {
        public string Titulo { get; set; }
        public string Autor { get; set; }
        public string ISBN { get; set; }
        public bool Disponivel { get; set; } = true;
    }

    public class Usuario
    {
        public string Nome { get; set; }
        public int ID { get; set; }
    }

    public class Emprestimo
    {
        public Livro Livro { get; set; }
        public Usuario Usuario { get; set; }
        public DateTime DataEmprestimo { get; set; }
        public DateTime DataDevolucaoPrevista { get; set; }
        public DateTime? DataDevolucaoEfetiva { get; set; }
    }
    public interface INotificador
    {
        void Enviar(string destinatario, string mensagem);
    }

    public class EmailNotificador : INotificador
    {
        public void Enviar(string destinatario, string mensagem)
        {
            Console.WriteLine($"[EMAIL] Para: {destinatario} | Mensagem: {mensagem}");
        }
    }

    public class SmsNotificador : INotificador
    {
        public void Enviar(string destinatario, string mensagem)
        {
            Console.WriteLine($"[SMS] Para: {destinatario} | Mensagem: {mensagem}");
        }
    }

    public class ServicoNotificacao
    {
        private readonly List<INotificador> notificadores;

        public ServicoNotificacao(List<INotificador> notificadores)
        {
            this.notificadores = notificadores;
        }

        public void Notificar(string destinatario, string mensagem)
        {
            foreach (var notificador in notificadores)
            {
                notificador.Enviar(destinatario, mensagem);
            }
        }
    }
    public class CalculadoraMulta
    {
        private const double ValorPorDia = 1.0;

        public double Calcular(Emprestimo emprestimo)
        {
            if (!emprestimo.DataDevolucaoEfetiva.HasValue ||
                emprestimo.DataDevolucaoEfetiva <= emprestimo.DataDevolucaoPrevista)
                return 0;

            TimeSpan atraso = emprestimo.DataDevolucaoEfetiva.Value - emprestimo.DataDevolucaoPrevista;
            return atraso.Days * ValorPorDia;
        }
    }
    public class ServicoBiblioteca
    {
        private readonly List<Livro> livros = new();
        private readonly List<Usuario> usuarios = new();
        private readonly List<Emprestimo> emprestimos = new();

        private readonly ServicoNotificacao notificacao;
        private readonly CalculadoraMulta calculadoraMulta;

        public ServicoBiblioteca(ServicoNotificacao notificacao, CalculadoraMulta calculadoraMulta)
        {
            this.notificacao = notificacao;
            this.calculadoraMulta = calculadoraMulta;
        }

        public void AdicionarLivro(string titulo, string autor, string isbn)
        {
            livros.Add(new Livro { Titulo = titulo, Autor = autor, ISBN = isbn });
        }

        public void AdicionarUsuario(string nome, int id)
        {
            usuarios.Add(new Usuario { Nome = nome, ID = id });
            notificacao.Notificar(nome, "Bem-vindo à Biblioteca! Você foi cadastrado.");
        }

        public bool RealizarEmprestimo(int usuarioId, string isbn, int dias)
        {
            var usuario = usuarios.FirstOrDefault(u => u.ID == usuarioId);
            var livro = livros.FirstOrDefault(l => l.ISBN == isbn && l.Disponivel);

            if (usuario == null || livro == null)
                return false;

            livro.Disponivel = false;

            var emprestimo = new Emprestimo
            {
                Usuario = usuario,
                Livro = livro,
                DataEmprestimo = DateTime.Now,
                DataDevolucaoPrevista = DateTime.Now.AddDays(dias)
            };

            emprestimos.Add(emprestimo);

            notificacao.Notificar(usuario.Nome, $"Você pegou o livro: {livro.Titulo}");
            return true;
        }

        public double RealizarDevolucao(string isbn, int usuarioId)
        {
            var emprestimo = emprestimos.FirstOrDefault(e =>
                e.Livro.ISBN == isbn &&
                e.Usuario.ID == usuarioId &&
                e.DataDevolucaoEfetiva == null);

            if (emprestimo == null)
                return -1;

            emprestimo.DataDevolucaoEfetiva = DateTime.Now;
            emprestimo.Livro.Disponivel = true;

            double multa = calculadoraMulta.Calcular(emprestimo);

            if (multa > 0)
                notificacao.Notificar(emprestimo.Usuario.Nome, $"Você tem uma multa de R$ {multa:0.00}");

            return multa;
        }

        public List<Livro> ListarLivros() => livros;
        public List<Usuario> ListarUsuarios() => usuarios;
        public List<Emprestimo> ListarEmprestimos() => emprestimos;
    }
    class Program
    {
        static void Main(string[] args)
        {
            var notificadores = new List<INotificador>
            {
                new EmailNotificador(),
                new SmsNotificador()
            };

            var servicoNotificacao = new ServicoNotificacao(notificadores);
            var calculadoraMulta = new CalculadoraMulta();
            var biblioteca = new ServicoBiblioteca(servicoNotificacao, calculadoraMulta);

            // Cadastro inicial
            biblioteca.AdicionarLivro("Clean Code", "Robert C. Martin", "978-0132350884");
            biblioteca.AdicionarLivro("Design Patterns", "Erich Gamma", "978-0201633610");

            biblioteca.AdicionarUsuario("João Silva", 1);
            biblioteca.AdicionarUsuario("Maria Oliveira", 2);

            // Empréstimo
            biblioteca.RealizarEmprestimo(1, "978-0132350884", 7);

            Console.WriteLine("Aguardando devolução...");
            Thread.Sleep(2000); // Simula o tempo passando

            // Devolução com atraso simulado
            double multa = biblioteca.RealizarDevolucao("978-0132350884", 1);
            Console.WriteLine($"Multa por atraso: R$ {multa:0.00}");

            Console.ReadLine();
        }
    }
}
