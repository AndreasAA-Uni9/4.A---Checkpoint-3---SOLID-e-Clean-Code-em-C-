using System;
using System.Collections.Generic;
using System.Linq;

namespace BibliotecaApp
{
    // MODELOS
    public class Livro
    {
        public string Titulo { get; set; }
        public string Autor { get; set; }
        public string ISBN { get; set; }
        public bool Disponivel { get; set; } = true;
    }

    public class Usuario
    {
        public string Nome { get; set; }
        public int ID { get; set; }
    }

    public class Emprestimo
    {
        public Livro Livro { get; set; }
        public Usuario Usuario { get; set; }
        public DateTime DataEmprestimo { get; set; }
        public DateTime DataDevolucaoPrevista { get; set; }
        public DateTime? DataDevolucaoEfetiva { get; set; }
    }

    // INTERFACES
    public interface INotificador
    {
        void Enviar(string destinatario, string assunto, string mensagem);
    }

    public interface IMultaService
    {
        double CalcularMulta(DateTime dataDevolucaoPrevista, DateTime dataAtual);
    }

    // IMPLEMENTAÇÕES DE NOTIFICADORES
    public class NotificadorEmail : INotificador
    {
        public void Enviar(string destinatario, string assunto, string mensagem)
        {
            Console.WriteLine($"[EMAIL] Para: {destinatario} | Assunto: {assunto} | Mensagem: {mensagem}");
        }
    }

    public class NotificadorSMS : INotificador
    {
        public void Enviar(string destinatario, string assunto, string mensagem)
        {
            Console.WriteLine($"[SMS] Para: {destinatario} | {mensagem}");
        }
    }

    // SERVIÇOS
public class LivroService
{
    private readonly List<Livro> livros = new();

    public void AdicionarLivro(string titulo, string autor, string isbn)
    {
        // Validação de dados
        if (string.IsNullOrWhiteSpace(titulo))
            throw new ArgumentException("O título do livro não pode ser vazio.");
        if (string.IsNullOrWhiteSpace(autor))
            throw new ArgumentException("O autor do livro não pode ser vazio.");
        if (string.IsNullOrWhiteSpace(isbn))
            throw new ArgumentException("O ISBN do livro não pode ser vazio.");

        if (livros.Any(l => l.ISBN == isbn))
            throw new InvalidOperationException("Já existe um livro com este ISBN cadastrado.");

        livros.Add(new Livro { Titulo = titulo, Autor = autor, ISBN = isbn });
        Console.WriteLine("Livro adicionado: " + titulo);
    }

    public Livro BuscarPorISBN(string isbn)
    {
        if (string.IsNullOrWhiteSpace(isbn))
            throw new ArgumentException("O ISBN não pode ser vazio.");

        return livros.FirstOrDefault(l => l.ISBN == isbn);
    }

    public List<Livro> BuscarTodos() => livros;
}

public class UsuarioService
{
    private readonly List<Usuario> usuarios = new();
    private readonly INotificador notificador;

    public UsuarioService(INotificador notificador)
    {
        this.notificador = notificador;
    }

    public void AdicionarUsuario(string nome, int id)
    {
        // Validação de dados
        if (string.IsNullOrWhiteSpace(nome))
            throw new ArgumentException("O nome do usuário não pode ser vazio.");
        if (id <= 0)
            throw new ArgumentException("O ID do usuário deve ser maior que zero.");

        if (usuarios.Any(u => u.ID == id))
            throw new InvalidOperationException("Já existe um usuário com este ID cadastrado.");

        usuarios.Add(new Usuario { Nome = nome, ID = id });
        notificador.Enviar(nome, "Bem-vindo à Biblioteca", "Você foi cadastrado em nosso sistema!");
    }

    public Usuario BuscarPorID(int id)
    {
        if (id <= 0)
            throw new ArgumentException("O ID do usuário deve ser maior que zero.");

        return usuarios.FirstOrDefault(u => u.ID == id);
    }

    public List<Usuario> BuscarTodos() => usuarios;
}

public class EmprestimoService
{
    private readonly List<Emprestimo> emprestimos = new();
    private readonly LivroService livroService;
    private readonly UsuarioService usuarioService;
    private readonly IMultaService multaService;
    private readonly List<INotificador> notificadores;

    public EmprestimoService(LivroService livroService, UsuarioService usuarioService, IMultaService multaService, List<INotificador> notificadores)
    {
        this.livroService = livroService;
        this.usuarioService = usuarioService;
        this.multaService = multaService;
        this.notificadores = notificadores;
    }

    public bool RealizarEmprestimo(int usuarioId, string isbn, int diasEmprestimo)
    {
        // Validação de dados
        if (usuarioId <= 0)
            throw new ArgumentException("O ID do usuário deve ser maior que zero.");
        if (string.IsNullOrWhiteSpace(isbn))
            throw new ArgumentException("O ISBN não pode ser vazio.");
        if (diasEmprestimo <= 0)
            throw new ArgumentException("O número de dias de empréstimo deve ser maior que zero.");

        var livro = livroService.BuscarPorISBN(isbn);
        var usuario = usuarioService.BuscarPorID(usuarioId);

        if (livro == null)
            throw new InvalidOperationException("Livro não encontrado.");
        if (usuario == null)
            throw new InvalidOperationException("Usuário não encontrado.");
        if (!livro.Disponivel)
            throw new InvalidOperationException("O livro não está disponível para empréstimo.");

        livro.Disponivel = false;
        emprestimos.Add(new Emprestimo
        {
            Livro = livro,
            Usuario = usuario,
            DataEmprestimo = DateTime.Now,
            DataDevolucaoPrevista = DateTime.Now.AddDays(diasEmprestimo)
        });

        Notificar(usuario.Nome, "Empréstimo Realizado", $"Você pegou emprestado o livro: {livro.Titulo}");
        return true;
    }

    public double RealizarDevolucao(string isbn, int usuarioId)
    {
        // Validação de dados
        if (usuarioId <= 0)
            throw new ArgumentException("O ID do usuário deve ser maior que zero.");
        if (string.IsNullOrWhiteSpace(isbn))
            throw new ArgumentException("O ISBN não pode ser vazio.");

        var emprestimo = emprestimos.FirstOrDefault(e => e.Livro.ISBN == isbn && e.Usuario.ID == usuarioId && e.DataDevolucaoEfetiva == null);

        if (emprestimo == null)
            throw new InvalidOperationException("Empréstimo não encontrado ou já devolvido.");

        emprestimo.DataDevolucaoEfetiva = DateTime.Now;
        emprestimo.Livro.Disponivel = true;

        double multa = multaService.CalcularMulta(emprestimo.DataDevolucaoPrevista, DateTime.Now);

        if (multa > 0)
        {
            Notificar(emprestimo.Usuario.Nome, "Multa por Atraso", $"Você tem uma multa de R$ {multa}");
        }

        return multa;
    }

    public List<Emprestimo> BuscarTodos() => emprestimos;

    private void Notificar(string destinatario, string assunto, string mensagem)
    {
        foreach (var notificador in notificadores)
        {
            notificador.Enviar(destinatario, assunto, mensagem);
        }
    }
}
